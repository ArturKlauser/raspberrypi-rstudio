# Docker build file for RStudio Server Debian package for Raspberry Pi.
#
# This image can either be cross-built on an x86 host or built natively on a
# Raspberry Pi3 B+ (RP3) with 1 GB of RAM. The compilation, especially gwtc
# (java), needs a lot of memory so you need to add more swap on your RP3
# in order for the compile to succeed:
#   * In /etc/dphys-swapfile set CONF_SWAPSIZE=1024 (default is 100)
#   * Then run sudo service dphys-swapfile restart
#   * Once the build is done and you're happy with the result you can set
#     the swap space back to the default 100 MB with:
#     * In /etc/dphys-swapfile set CONF_SWAPSIZE=100
#     * sudo service dphys-swapfile restart
#
# Run the build like so:
#   docker build -t raspberrypi-rstudio-server-deb -f Dockerfile.server_deb .
# This will build the RStudio Server Debian package and leave it in the root
# directory.

FROM arturklauser/raspberrypi-rstudio-build-env as build_env

# Balenalib images for arm can be cross-built on x86.
# Comment out next line for native build.
RUN [ "cross-build-start" ]

# Timestamp for build log.
RUN  date -u +'%Y-%m-%dT%H:%M:%SZ'

# Build only with parallelism 2 - gwtc is a memory hog. If you still run out
# of memory override this to 1. If you cross-build on an x86 host with at
# least 6-8 GB of memory you may get faster build times setting this to e.g. 4.
ARG BUILD_PARALLELISM=2

WORKDIR /home/pi/Downloads/rstudio/build
RUN set -x \
    && cmake .. \
      -DRSTUDIO_TARGET=Server \
      -DCMAKE_BUILD_TYPE=Release \
      -DRSTUDIO_PACKAGE_BUILD=1 \
      -DRSTUDIO_BOOST_VERSION=1.62.0 \
      -DRSTUDIO_USE_SYSTEM_BOOST=1 \
    && make preinstall -j${BUILD_PARALLELISM}
# Create the deb package. Unfortunately cpack wants to rerun the whole build,
# so we'll work around that by giving it an empty build rule.
# (There really should be a better way to avoid the rebuild.)
RUN set -x \
    && mv Makefile Makefile.orig \
    && echo 'preinstall:' > Makefile \
    && cpack -G DEB \
    && mv Makefile.orig Makefile
# The product of this build is: rstudio-server-${RSTUDIO_BUILD_TAG}_armhf.deb

# Extract only the finished Debian package and leave it in an empty docker
# image to reduce image size. If you want to capture the package in its
# build environment, build it only to stage --target=build_env
FROM scratch as package

COPY --from=build_env /home/pi/Downloads/rstudio/build/rstudio-server-${RSTUDIO_BUILD_TAG}_armhf.deb /

# Timestamp for build log.
RUN  date -u +'%Y-%m-%dT%H:%M:%SZ'

# Comment out next line for native build.
RUN [ "cross-build-end" ]

# Label the image.
# docker build ... \
#  --build-arg VCS_REF=$(git log --pretty=format:'%H' HEAD~..HEAD) \
#  --build-arg BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ') ...
ARG VCS_REF=${RSTUDIO_VCS_REF:-}
ARG BUILD_DATE=${RSTUDIO_BUILD_DATE:-}

ENV RSTUDIO_VCS_REF=${VCS_REF}
ENV RSTUDIO_BUILD_DATE=${BUILD_DATE}

LABEL description='RStudio Server Debian Package for Raspberry Pi.'
LABEL maintainer='Artur.Klauser@computer.org'
LABEL url='https://rstudio.com/'
LABEL vcs-url='https://github.com/ArturKlauser/raspberrypi-rstudio'
LABEL vcs-ref=${RSTUDIO_VCS_REF}
LABEL build-date=${RSTUDIO_BUILD_DATE}
