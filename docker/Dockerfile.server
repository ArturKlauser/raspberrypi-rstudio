# Docker build file for RStudio Server runtime environment.
#
# This image can either be cross-built on an x86 host or built natively on a
# Raspberry Pi3 B+ (RP3).
#
# We depend on the image generated by Dockerfile.server-deb which contains the
# built Debian package. This is a multi-stage build that tries to reduce
# image size. We install the .deb package in a fresh Debian runtime image
# (build stage "install-minimal"). This image contains everything that is
# necessary to run rstudio-server and use it's basic functionality. However,
# some RStudio functionality will not be supported, e.g. working with .Rmd
# files will require the lengthy installation of additional system packages
# and R libraries. If you want this functionality you can use the image
# generated by the "install-full" build stage (default), that adds such
# dependencies for the price of resulting in a significantly larger docker
# image.
#
# Run the build with the build.sh script to make sure all required ARGs are
# passed in.
#
# To use the docker image, mount a working directory from your Raspberry Pi
# host into the container at runtime. By default, RStudio will store all
# your files in this working directory so they survive across container
# invocations. An example invocation is:
#   docker run --rm --name rserver -v $PWD/work:/home/rstudio -p 8787:8787 -d \
#     raspberrypi-rstudio-server
# Once the container has started you can point your web browser to your host
# machine port 8787 to connect to the rstudio server. Log in with user
# "rstudio" and password "raspberry" (without the quotes) to start working.
# When you're done you may remove the server with
#   docker rm -f rserver

ARG DEBIAN_VERSION
ARG VERSION_TAG

# Import image containing the built .deb package.
FROM arturklauser/raspberrypi-rstudio-server-deb:${VERSION_TAG}-${DEBIAN_VERSION} as build

#===== Build stage: install-minimal. =====

ARG DEBIAN_VERSION

# See https://www.balena.io/docs/reference/base-images/base-images/
FROM balenalib/raspberrypi3-debian:${DEBIAN_VERSION}-run as install-minimal

# Balenalib images for arm can be cross-built on x86.
# Comment out next line for native build.
RUN [ "cross-build-start" ]

# Define Debian version, RStudio version to use and the package release tag.
ARG DEBIAN_VERSION
ARG VERSION_MAJOR
ARG VERSION_MINOR
ARG VERSION_PATCH
ARG VERSION_TAG
ARG PACKAGE_RELEASE

# Automatically computed variables - don't override on command line.
ARG BUILD_TAG=${VERSION_TAG}-${PACKAGE_RELEASE}

COPY --from=build /rstudio-server-${BUILD_TAG}_armhf.deb .

#--- begin buster or bullseye
# Debian 10 (Buster) ca-certificates package misses all cert-hash links in
# /etc/ssl/certs, causing SSL (e.g. curl https://...) to fail. Repopulate those
# symlinks.
RUN set -x; \
    if [ "${DEBIAN_VERSION}" = 'buster' -o "${DEBIAN_VERSION}" = 'bullseye' ]; then \
      update-ca-certificates --fresh; \
    fi
#--- end buster or bullseye

# Upgrade base image.
RUN set -x \
    && apt-get update \
    && apt-get --with-new-pkgs upgrade -y \
    && apt autoremove \
    && apt-get clean

# User and password for rstudio-server web login.
ARG USER=rstudio
ARG PASSWORD=raspberry

# Install R, RStudio, and basic dependencies.
RUN set -x \
    && apt-get update \
    && apt-get install -y r-base locales \
    # Create the locale definition files we want to use.
    && localedef -f UTF-8 -i en_US en_US.UTF-8 \
    && apt install ./rstudio-server-${BUILD_TAG}_armhf.deb \
    && apt-get clean \
    && rm ./rstudio-server-${BUILD_TAG}_armhf.deb \
    && useradd -m -p $(perl -e "print crypt('"${PASSWORD}"','pi');") ${USER}

ENV LANG=en_US.UTF-8 \
    LANGUAGE=en_US.UTF-8

# Expose rstudio-server listen port.
EXPOSE 8787

# The docker image just starts the server daemon and waits forever.
CMD rstudio-server start; while true; do sleep 10000; done

# Comment out next line for native build.
RUN [ "cross-build-end" ]

#===== Build stage: install-full. =====

FROM install-minimal as install-full

ARG DEBIAN_VERSION

# Comment out next line for native build.
RUN [ "cross-build-start" ]

# Add additional packages to make R/RStudio more useful:
#   * for R packages installed from source (build-essential etc.)
#   * for knit-to-HTML of .Rmd files (pandoc etc.)
#   * various r-cran packages needed for handling .Rmd files (catools etc.)
#   * various R libraries not available as r-cran packages needed for handling .Rmd files (rmarkdown etc.)
#   * Latex for .Rmd to PDF conversion
#   * source code versioning (git etc.)
#   * data cleaning and plotting (tydir, ggplot, etc.)

# Install packages for C, C++, Fortran build environments.
RUN set -x \
    && apt-get update \
    && apt-get install -y \
       build-essential \
       gfortran \
       libblas-dev \
       pkg-config \
    && apt-get clean

# Install compiler CRAN package for install.packages() below.
RUN set -x \
    && apt-get update \
    && apt-get install -y \
       r-cran-rcpp \
    && apt-get clean

# Install basic packages for .Rmd file handling.
RUN set -x; \
    #--- begin stretch
    if [ "${DEBIAN_VERSION}" = 'stretch' ]; then \
      Rscript -e 'install.packages(c("rmarkdown", "rprojroot"), \
                                   repos="http://cran.rstudio.com")'; \
    fi; \
    #--- end stretch
    #--- begin buster or bullseye
    if [ "${DEBIAN_VERSION}" = 'buster' -o "${DEBIAN_VERSION}" = 'bullseye' ]; then \
      apt-get update \
      && apt-get install -y \
         r-cran-rmarkdown \
         r-cran-rprojroot \
      && apt-get clean; \
    fi
    #--- end buster or bullseye

# Install packages for knitting to PDF.
RUN set -x \
    && apt-get update \
    && apt-get install -y \
       # CRAN packages for .Rmd file handling
       r-cran-catools \
       # .Rmd to HTML and PDF conversion
       pandoc \
       pandoc-citeproc \
       texlive-latex-extra \
       texlive-generic-extra \
       texlive-fonts-recommended \
       lmodern \
    && apt-get clean

# Install tidyverse packages for data cleaning, manipulation, and plotting.
RUN set -x; \
    #--- begin stretch
    if [ "${DEBIAN_VERSION}" = 'stretch' ]; then \
      apt-get update \
      && apt-get install -y \
         zlib1g-dev \
         libxml2-dev \
         r-cran-crayon \
         r-cran-dplyr \
         r-cran-ggplot2 \
         r-cran-httr \
         r-cran-jsonlite \
         r-cran-lubridate \
         r-cran-magrittr \
         r-cran-readxl \
         r-cran-stringr \
         r-cran-tibble \
         r-cran-tidyr \
         r-cran-xml2 \
      && Rscript -e 'install.packages(c("tidyverse"), \
                                      repos="http://cran.rstudio.com")' \
      && apt-get clean; \
    fi; \
    #--- end stretch
    #--- begin buster or bullseye
    if [ "${DEBIAN_VERSION}" = 'buster' -o "${DEBIAN_VERSION}" = 'bullseye' ]; then \
      apt-get update \
      && apt-get install -y \
         zlib1g-dev \
         r-cran-tidyverse \
      && apt-get clean; \
    fi
    #--- end buster or bullseye

# Install support for File->New File for Stan, D3, SQL, python, plumber, etc.
RUN set -x; \
    #--- begin buster or bullseye
    if [ "${DEBIAN_VERSION}" = 'buster' -o "${DEBIAN_VERSION}" = 'bullseye' ]; then \
      apt-get update \
      && apt-get install -y \
         r-cran-rstan \
         r-cran-rsqlite \
         r-cran-png \
         r-cran-reticulate \
         r-cran-plumber \
      && Rscript -e 'install.packages(c("r2d3"), \
                                      repos="http://cran.rstudio.com")' \
      && apt-get clean; \
    fi
    #--- end buster or bullseye

# Install devtools for RStudio "New Project -> R package using devtools"
RUN set -x; \
    #--- begin stretch
    if [ "${DEBIAN_VERSION}" = 'stretch' ]; then \
      apt-get update \
      && apt-get install -y \
         libgit2-dev \
         libssl-dev \
         libssh2-1-dev \
         r-cran-crayon \
         r-cran-curl \
         r-cran-httr \
         r-cran-memoise \
         r-cran-openssl \
         r-cran-prettyunits \
         r-cran-r6 \
         r-cran-withr \
         zlib1g-dev \
      && Rscript -e 'install.packages(c("devtools"), \
                                      repos="http://cran.rstudio.com")' \
      && apt-get clean; \
    fi; \
    #--- end stretch
    #--- begin buster or bullseye
    if [ "${DEBIAN_VERSION}" = 'buster' -o "${DEBIAN_VERSION}" = 'bullseye' ]; then \
      apt-get update \
      && apt-get install -y \
         r-cran-devtools \
      && apt-get clean; \
    fi
    #--- end buster or bullseye

# Install packages for source code management (available from RStudio menus).
RUN set -x \
    && apt-get update \
    # misc libraries for R packages
    && apt-get install -y libcurl4-openssl-dev \
    # packages for RStudio project version control
    && apt-get install -y --install-recommends git subversion \
    && apt-get clean

# Comment out next line for native build.
RUN [ "cross-build-end" ]

# Label the image. Override those ARGs on the command line:
# docker build ... \
#  --build-arg VCS_REF=$(git log --pretty=format:'%H' HEAD~..HEAD) \
#  --build-arg BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ') ...
ARG VCS_REF
ARG BUILD_DATE
LABEL description='RStudio Server Runtime Environment for Raspberry Pi.'
LABEL maintainer='Artur.Klauser@computer.org'
LABEL url='https://rstudio.com/'
LABEL vcs-url='https://github.com/ArturKlauser/raspberrypi-rstudio'
LABEL vcs-ref=${VCS_REF}
LABEL build-date=${BUILD_DATE}
