# Docker build file for RStudio Server Debian package for Raspberry Pi.
#
# This image can either be cross-built on an x86 host or built natively on a
# Raspberry Pi3 B+ (RP3) with 1 GB of RAM. The compilation, especially gwtc
# (java), needs a lot of memory so you need to add more swap on your RP3
# in order for the compile to succeed:
#   * In /etc/dphys-swapfile set CONF_SWAPSIZE=1024 (default is 100)
#   * Then run sudo service dphys-swapfile restart
#   * Once the build is done and you're happy with the result you can set
#     the swap space back to the default 100 MB with:
#     * In /etc/dphys-swapfile set CONF_SWAPSIZE=100
#     * sudo service dphys-swapfile restart
#
# Run the build with the build.sh script to make sure all required ARGs are
# passed in. This will build the RStudio Server Debian package and leave
# it in the root directory.

ARG DEBIAN_VERSION
ARG VERSION_TAG

FROM arturklauser/raspberrypi-rstudio-build-env:${VERSION_TAG}-${DEBIAN_VERSION} AS build_env

SHELL ["/bin/bash", "-o", "pipefail", "-c"]

# Balenalib images for arm can be cross-built on x86.
# Comment out next line for native build.
RUN [ "cross-build-start" ]

# Define RStudio source code version to use and the package release tag.
ARG DEBIAN_VERSION
ARG VERSION_MAJOR
ARG VERSION_MINOR
ARG VERSION_PATCH
ARG VERSION_TAG
ARG PACKAGE_RELEASE

# Automatically computed variables - don't override on command line.
ARG BUILD_TAG=${VERSION_TAG}-${PACKAGE_RELEASE}

# Build only with parallelism 2 - gwtc is a memory hog. If you still run out
# of memory override this to 1. If you cross-build on an x86 host with at
# least 6-8 GB of memory you may get faster build times setting this to e.g. 4.
ARG BUILD_PARALLELISM=2

# Travis CI needs special handling since it expects output at least every 10
# minutes, otherwise it errors the job.
ARG TRAVIS

WORKDIR /home/pi/Downloads/rstudio/build

# These environment variables are used by the build system to set the
# version number built into the binaries and package names.
ENV RSTUDIO_VERSION_MAJOR=${VERSION_MAJOR} \
    RSTUDIO_VERSION_MINOR=${VERSION_MINOR} \
    RSTUDIO_VERSION_PATCH=${VERSION_PATCH}

# Adapt to host resource constraints.
# hadolint ignore=DL3001
RUN set -x \
    # If we don't have a lot of RAM on the host enact restritions on GWT:
    # * Constrain gwtc compiler to use a single worker - gwtc is a memory
    #   hog and running multiple workers is getting too tight with 1 GB RAM
    #   + 1 GB swap.
    # * Reduce heap size to 600 MB to avoid vitual memory thrashing on our 1
    #   GB RAM RPi3. Below 600 MB we'd run the jvm out of heap space.
    && build_xml='../src/gwt/build.xml' \
    && ram_mb=$(free -m | awk '/Mem:/ {print $2}') \
    && if [[ "${ram_mb}" -lt '3500' ]]; then \
        perl -0777 -i -pe \
          's#(<arg value="-localWorkers"/>\s+<arg value=)"\d+"(/>)#\1"1"\2#s' \
          "$build_xml"; \
        perl -i -pe 's#-Xmx1536#-Xmx600#' "$build_xml"; \
      fi \
    # Travis: Make sure gwt spews output frequently enough for Travis not to
    # declare the build dead and error out the job.
    && if [[ "$TRAVIS" == 'true' ]]; then \
         loglevel='<arg value="-logLevel"/>\n<arg value="TRACE"/>\n'; \
         perl -i -pe "s#(.*-localWorkers.*)#$loglevel"'\1#' "$build_xml"; \
       fi

# Configure the build.
RUN set -x \
    # Set up boost dependency.
    && case $(echo ${VERSION_TAG} | cut -c1-3) in \
         '1.1') BOOST='-DRSTUDIO_BOOST_VERSION' ;; \
         '1.2') BOOST='-DRSTUDIO_BOOST_REQUESTED_VERSION' ;; \
       esac \
    && case ${DEBIAN_VERSION} in \
         'stretch') BOOST="${BOOST}=1.62.0" ;; \
         'buster' | 'bullseye') BOOST="${BOOST}=1.67.0" ;; \
       esac \
    && cmake .. \
       -DRSTUDIO_TARGET=Server \
       -DCMAKE_BUILD_TYPE=Release \
       -DRSTUDIO_PACKAGE_BUILD=1 \
       ${BOOST} \
       -DRSTUDIO_USE_SYSTEM_BOOST=1

# Compile the C++ targets.
RUN make -j${BUILD_PARALLELISM} rstudio-core
RUN make -j${BUILD_PARALLELISM} rstudio-core-hunspell
RUN make -j${BUILD_PARALLELISM} rstudio-core-synctex
RUN make -j${BUILD_PARALLELISM} rstudio-monitor
RUN make -j${BUILD_PARALLELISM} rstudio-r
RUN make -j${BUILD_PARALLELISM} rsession
RUN make -j${BUILD_PARALLELISM} rstudio-session-workers
RUN make -j${BUILD_PARALLELISM} rpostback
RUN make -j${BUILD_PARALLELISM} rserver
RUN make -j${BUILD_PARALLELISM} rserver-pam

# Compile the rest, in particular java gwt_build.
RUN make -j${BUILD_PARALLELISM} preinstall \
    # Travis: Prune some of the gwt spew again. Too much output can cause a
    # log overflow and error out the job.
    | grep -v '^[[:space:]]*\[java\][[:space:]]*\(Found\|Resolving\|Preparing method\|Adding image\)'

# Create the deb package. Unfortunately cpack wants to rerun the whole build,
# so we'll work around that by giving it an empty build rule.
# (There really should be a better way to avoid the rebuild.)
RUN set -x \
    && mv Makefile Makefile.orig \
    && echo 'preinstall:' > Makefile \
    && cpack -G DEB \
    && mv Makefile.orig Makefile
# The product of this build is: rstudio-server-${BUILD_TAG}_armhf.deb

# Comment out next line for native build.
RUN [ "cross-build-end" ]

# Extract only the finished Debian package and leave it in an empty docker
# image to reduce image size. If you want to capture the package in its
# build environment, build it only to stage --target=build_env
FROM scratch AS package

# ARGs need to be redefined in every build stage to be accessible.
ARG VERSION_MAJOR
ARG VERSION_MINOR
ARG VERSION_PATCH
ARG VERSION_TAG
ARG PACKAGE_RELEASE

# Automatically computed variables - don't override on command line.
ARG BUILD_TAG=${VERSION_TAG}-${PACKAGE_RELEASE}

COPY --from=build_env /home/pi/Downloads/rstudio/build/rstudio-server-${BUILD_TAG}_armhf.deb /

# Label the image. Override those ARGs on the command line:
# docker build ... \
#  --build-arg VCS_REF=$(git log --pretty=format:'%H' HEAD~..HEAD) \
#  --build-arg BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ') ...
ARG VCS_REF
ARG BUILD_DATE
LABEL description='RStudio Server Debian Package Build for Raspberry Pi.'
LABEL maintainer='Artur.Klauser@computer.org'
LABEL url='https://rstudio.com/'
LABEL vcs-url='https://github.com/ArturKlauser/raspberrypi-rstudio'
LABEL vcs-ref=${VCS_REF}
LABEL build-date=${BUILD_DATE}
