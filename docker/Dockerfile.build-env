# Docker build file for RStudio (Server and Desktop) on Raspberry Pi.
#
# This image can either be cross-built on an x86 host or built natively on a
# Raspberry Pi3 B+ (RP3) with 1 GB of RAM.
#
# Some of this work is based on the excellent write-up of RStudio installation at
# http://herb.h.kobe-u.ac.jp/raspiinfo/rstudio_en.html
#
# Run the build with the build.sh script to make sure all required ARGs are
# passed in. This will create a build environment image that can be used for
# compiling RStudio Server and Desktop Debian packages.

ARG DEBIAN_VERSION
ARG VERSION_TAG

# See https://www.balena.io/docs/reference/base-images/base-images/
FROM balenalib/raspberrypi3-debian:${DEBIAN_VERSION}-build as build_env

# Balenalib images for arm can be cross-built on x86.
# Comment out next line for native build.
RUN [ "cross-build-start" ]

# Define Debian version, RStudio version to use and the package release tag.
ARG DEBIAN_VERSION
ARG VERSION_MAJOR
ARG VERSION_MINOR
ARG VERSION_PATCH
ARG VERSION_TAG
ARG PACKAGE_RELEASE

# Automatically computed variables - don't override on command line.
ARG BUILD_TAG=${VERSION_TAG}-${PACKAGE_RELEASE}

#--- begin buster
# Debian 10 (Buster) repositories are not signed yet, so override apt
# security checks.
RUN set -x; \
    if [ "${DEBIAN_VERSION}" = 'buster' ]; then \
      perl -i -pe 's/^deb (\[([^\]]*)\](\s*))?/deb [trusted=yes$3$2] /' /etc/apt/sources.list; \
    fi
# Debian 10 (Buster) ca-certificates package misses all cert-hash links in
# /etc/ssl/certs, causing SSL (e.g. curl https://...) to fail. Repopulate those
# symlinks.
RUN set -x; \
    if [ "${DEBIAN_VERSION}" = 'buster' ]; then \
      update-ca-certificates --fresh; \
    fi
#--- end buster

# Upgrade base image.
RUN set -x \
    && apt-get update \
    && apt-get upgrade -y \
    && apt autoremove

# Install some basic build dependencies.
RUN set -x \
    && apt-get install -y \
       galternatives \
       git \
       openjdk-8-jdk \
       pandoc \
       pandoc-citeproc \
       python-dev \
       r-recommended

# Get the RStudio sources. We only make a shallow clone of the version we
# need, instead of cloning the whole repository.
# Note that HEAD has dependencies that RaspberryPi3 Debian 9 (Stretch)
# currently doesn't satisfy, e.g. QT >= 5.10.
RUN set -x \
    && mkdir -p /home/pi/Downloads \
    && cd /home/pi/Downloads \
    && git clone -b v${VERSION_TAG} --depth 1 https://github.com/rstudio/rstudio.git \
    && ln -s rstudio rstudio-${VERSION_TAG}

WORKDIR /home/pi/Downloads/rstudio/dependencies/linux
# We're going to use the pre-built system version of the boost library instead
# of installing and building the RStudio version of boost (version 1.63.0) which
# takes several hours of build time.
# Comment out boost source installation.
RUN perl -i -pe 's/(^.*install-boost$)/# \1/s' ../common/install-common
# Install system boost.
RUN set -x \
  && if [ "${DEBIAN_VERSION}" = 'stretch' -o "${DEBIAN_VERSION}" = 'buster' ]; then \
         BOOST_VERSION=1.62; \
       elif [ "${DEBIAN_VERSION}" = 'bullseye'  ]; then \
         BOOST_VERSION=1.67; \
       fi \
  && apt-get install libboost${BOOST_VERSION}-all-dev
# We use the system QT libraries instead of RSTudio's.
# Script installs qt-sdk binaries for x86 but we need armhf, so skip it.
RUN ./install-dependencies-debian --exclude-qt-sdk
# Install system QT libraries.
RUN apt-get install -y \
      libqt5opengl5-dev \
      libqt5sensors5-dev \
      libqt5svg5-dev \
      libqt5webkit5-dev \
      libqt5xmlpatterns5-dev \
      qt5-default \
      qt5-style-plugins \
      qtpositioning5-dev \
      qtwebengine5-dev

WORKDIR /home/pi/Downloads/rstudio
# Package building wants to grab QT library files to bundle them with the
# RStudio desktop .deb package. But bundling of system QT doesn't work due
# to path differences and is unnecessary anyway.
RUN sed -i -e 's#\(set(RSTUDIO_BUNDLE_QT\) TRUE#\1 FALSE#' src/cpp/desktop/CMakeLists.txt

#--- begin buster
# We need libssl1.0.2. No other version will work since we're compiling against
# that version and have a dynamic library depenency on it.
RUN sed -i -e 's#libssl1.0.0 | libssl1.0.2 | libssl1.1, #libssl1.0.2, #' package/linux/CMakeLists.txt
#--- end buster

# For Desktop, add the package dependencies to system QT libraries.
#--- begin stretch
RUN sed -i -e 's#\(^.*set(RSTUDIO_DEBIAN_DEPENDS "${RSTUDIO_DEBIAN_DEPENDS}libgstreamer0.10.*$\)#\1\nset(RSTUDIO_DEBIAN_DEPENDS "${RSTUDIO_DEBIAN_DEPENDS}libqt5webchannel5, libqt5webkit5, libqt5positioning5, libqt5sensors5, libqt5svg5, libqt5xml5, libqt5xmlpatterns5, ")#' package/linux/CMakeLists.txt
#--- end stretch
#--- begin buster
RUN sed -i -e 's#\(^.*set(RSTUDIO_DEBIAN_DEPENDS "psmisc,.*$\)#\1\nset(RSTUDIO_DEBIAN_DEPENDS "${RSTUDIO_DEBIAN_DEPENDS}libqt5webchannel5, libqt5webkit5, libqt5positioning5, libqt5sensors5, libqt5svg5, libqt5xml5, libqt5xmlpatterns5, ")#' package/linux/CMakeLists.txt
#--- end buster

# Add our own package release (aka. Debian revision number) to the .deb file.
RUN sed -i -e 's#\(^.*\)-\(${PACKAGE_ARCHITECTURE}\)#set(CPACK_DEBIAN_PACKAGE_RELEASE "'${PACKAGE_RELEASE}'")\n\1-${CPACK_DEBIAN_PACKAGE_RELEASE}_\2#' package/linux/CMakeLists.txt

# Constrain gwtc compiler to use a single worker - gwtc is a memory hog and
# running multiple workers is getting too tight with 1 GB RAM + 1 GB swap.
RUN perl -0777 -i -pe 's#(<arg value="-localWorkers"/>\s+<arg value=)"\d+"(/>)#\1"1"\2#s' src/gwt/build.xml
# Reduce heap size to 600 MB to avoid vitual memory thrashing on our 1 GB
# RAM RPi3. Below 600 MB we'd run the jvm out of heap space.
RUN perl -i -pe 's#-Xmx1536#-Xmx600#' src/gwt/build.xml

#--- begin stretch
# Change "cmake_policy(SET CMP0020 OLD)" to "cmake_policy(SET CMP0043 OLD)"
# to avoid a build time complaint.
RUN sed -i -e s/CMP0020/CMP0043/g src/cpp/desktop/CMakeLists.txt
#--- end stretch

# We build in a separate directory.
RUN mkdir build

# Comment out next line for native build.
RUN [ "cross-build-end" ]

# Label the image. Override those ARGs on the command line:
# docker build ... \
#  --build-arg VCS_REF=$(git log --pretty=format:'%H' HEAD~..HEAD) \
#  --build-arg BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ') ...
ARG VCS_REF
ARG BUILD_DATE
LABEL description='RStudio Build Environment for Raspberry Pi.'
LABEL maintainer='Artur.Klauser@computer.org'
LABEL url='https://rstudio.com/'
LABEL vcs-url='https://github.com/ArturKlauser/raspberrypi-rstudio'
LABEL vcs-ref=${VCS_REF}
LABEL build-date=${BUILD_DATE}
